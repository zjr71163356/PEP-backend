// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PEP;

#nullable disable

namespace PEP.Migrations
{
    [DbContext(typeof(FinalDesignContext))]
    partial class FinalDesignContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PEP.Model.Domain.AlgorithmProblem", b =>
                {
                    b.Property<int>("ProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("problem_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProblemId"));

                    b.Property<int?>("AcceptRate")
                        .HasColumnType("int")
                        .HasColumnName("accept_rate");

                    b.Property<string>("Difficulty")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("difficulty");

                    b.Property<string>("ProblemContent")
                        .HasColumnType("text")
                        .HasColumnName("problem_content");

                    b.Property<int?>("TestAmount")
                        .HasColumnType("int")
                        .HasColumnName("test_amount");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("ProblemId")
                        .HasName("PK__algorith__69B87CECB40E0363");

                    b.ToTable("algorithm_problems", (string)null);
                });

            modelBuilder.Entity("PEP.Model.Domain.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("AvatarImgurl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("avatar_imgurl");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment_content");

                    b.Property<int>("FromUserId")
                        .HasColumnType("int")
                        .HasColumnName("from_user_id");

                    b.Property<string>("FromUsername")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("from_username");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp");

                    b.HasKey("CommentId")
                        .HasName("PK__comments__E795768775FC3BBB");

                    b.HasIndex("FromUserId");

                    b.HasIndex("PostId");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("PEP.Model.Domain.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int>("ChapterCount")
                        .HasColumnType("int")
                        .HasColumnName("chapter_count");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("course_name");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("Introduction")
                        .HasColumnType("text")
                        .HasColumnName("introduction");

                    b.HasKey("CourseId")
                        .HasName("PK__courses__2AA84FD131A1069E");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("PEP.Model.Domain.CourseChapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chapter_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"));

                    b.Property<decimal>("ChapterNumber")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("chapter_number");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("ChapterId")
                        .HasName("PK__course_c__745EFE87783BE697");

                    b.HasIndex("CourseId");

                    b.ToTable("course_chapters", (string)null);
                });

            modelBuilder.Entity("PEP.Model.Domain.CourseTag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tagId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("TagColor")
                        .HasColumnType("int")
                        .HasColumnName("tag_color");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tag_name");

                    b.HasKey("TagId")
                        .HasName("PK__course_t__50FC01572FB805B7");

                    b.HasIndex("CourseId");

                    b.ToTable("course_tags", (string)null);
                });

            modelBuilder.Entity("PEP.Model.Domain.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("AvatarImgurl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar_imgurl");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("post_content");

                    b.Property<DateTime>("PostTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("post_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("PostType")
                        .HasColumnType("bit")
                        .HasColumnName("post_type");

                    b.Property<int?>("ProblemId")
                        .HasColumnType("int")
                        .HasColumnName("problem_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.HasKey("PostId")
                        .HasName("PK__posts__3ED78766341668CE");

                    b.HasIndex("ProblemId");

                    b.HasIndex("UserId");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("PEP.Model.Domain.ProblemTag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<int?>("ProblemId")
                        .HasColumnType("int")
                        .HasColumnName("problem_id");

                    b.Property<int>("TagColor")
                        .HasColumnType("int")
                        .HasColumnName("tag_color");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tag_name");

                    b.HasKey("TagId")
                        .HasName("PK__problem___4296A2B61260FB1B");

                    b.HasIndex("ProblemId");

                    b.ToTable("problem_tags", (string)null);
                });

            modelBuilder.Entity("PEP.Model.Domain.Reply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reply_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyId"));

                    b.Property<string>("AvatarImgurl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("avatar_imgurl");

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    b.Property<int>("FromUserId")
                        .HasColumnType("int")
                        .HasColumnName("from_user_id");

                    b.Property<string>("FromUsername")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("from_username");

                    b.Property<string>("ReplyContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reply_content");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int")
                        .HasColumnName("to_user_id");

                    b.Property<string>("ToUsername")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("to_username");

                    b.HasKey("ReplyId")
                        .HasName("PK__replies__EE40569834EB4973");

                    b.HasIndex("CommentId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("replies", (string)null);
                });

            modelBuilder.Entity("PEP.Model.Domain.SubChapter", b =>
                {
                    b.Property<int>("SubChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sub_chapter_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubChapterId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<string>("MarkdownContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("markdown_content");

                    b.Property<int?>("ParentChapterId")
                        .HasColumnType("int")
                        .HasColumnName("parent_chapter_id");

                    b.Property<int?>("ParentChapterNumber")
                        .HasColumnType("int")
                        .HasColumnName("parent_chapter_number");

                    b.Property<decimal>("SubChapterNumber")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("sub_chapter_number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("SubChapterId")
                        .HasName("PK__sub_chap__2B141C0DACD75C26");

                    b.HasIndex("CourseId");

                    b.HasIndex("ParentChapterId");

                    b.ToTable("sub_chapters", (string)null);
                });

            modelBuilder.Entity("PEP.Model.Domain.SubmissionRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Compiler")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("compiler");

                    b.Property<string>("CompilerOutput")
                        .HasColumnType("text")
                        .HasColumnName("compiler_output");

                    b.Property<int?>("Memory")
                        .HasColumnType("int")
                        .HasColumnName("memory");

                    b.Property<int?>("ProblemId")
                        .HasColumnType("int")
                        .HasColumnName("problem_id");

                    b.Property<string>("ResultState")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("result_state");

                    b.Property<decimal?>("Runtime")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("runtime");

                    b.Property<DateTime?>("SubmitTime")
                        .HasColumnType("datetime")
                        .HasColumnName("submit_time");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.HasKey("RecordId")
                        .HasName("PK__records__BFCFB4DD8379D7F1");

                    b.HasIndex("ProblemId");

                    b.HasIndex("UserId");

                    b.ToTable("submission_records", (string)null);
                });

            modelBuilder.Entity("PEP.Model.Domain.TestDatum", b =>
                {
                    b.Property<int>("TestDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("test_data_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestDataId"));

                    b.Property<string>("InputData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("input_data");

                    b.Property<string>("OutputData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("output_data");

                    b.Property<int?>("ProblemId")
                        .HasColumnType("int")
                        .HasColumnName("problem_id");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int")
                        .HasColumnName("sequence_number");

                    b.HasKey("TestDataId")
                        .HasName("PK__test_dat__C3AF6FF27FC55BE2");

                    b.HasIndex("ProblemId");

                    b.ToTable("test_data", (string)null);
                });

            modelBuilder.Entity("PEP.Model.Domain.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("account");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.HasKey("UserId")
                        .HasName("PK__users__CB9A1CFF97EC8EA4");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PEP.Model.Domain.UserCourse", b =>
                {
                    b.Property<int>("UserCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_course_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCourseId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<bool?>("IsFavorite")
                        .HasColumnType("bit")
                        .HasColumnName("is_favorite");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("UserCourseId")
                        .HasName("PK__user_cou__651E082692E5E6C8");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("user_courses", (string)null);
                });

            modelBuilder.Entity("PEP.Model.Domain.Comment", b =>
                {
                    b.HasOne("PEP.Model.Domain.User", "FromUser")
                        .WithMany("Comments")
                        .HasForeignKey("FromUserId")
                        .IsRequired()
                        .HasConstraintName("fk_comment_to_user_id");

                    b.HasOne("PEP.Model.Domain.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("fk_comments_post_id");

                    b.Navigation("FromUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("PEP.Model.Domain.CourseChapter", b =>
                {
                    b.HasOne("PEP.Model.Domain.Course", "Course")
                        .WithMany("CourseChapters")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("fk_course_chapters_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("PEP.Model.Domain.CourseTag", b =>
                {
                    b.HasOne("PEP.Model.Domain.Course", "Course")
                        .WithMany("CourseTags")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("fk_tag_course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("PEP.Model.Domain.Post", b =>
                {
                    b.HasOne("PEP.Model.Domain.AlgorithmProblem", "Problem")
                        .WithMany("Posts")
                        .HasForeignKey("ProblemId")
                        .HasConstraintName("fk_posts_algorithm_problems");

                    b.HasOne("PEP.Model.Domain.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_posts_user_id");

                    b.Navigation("Problem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PEP.Model.Domain.ProblemTag", b =>
                {
                    b.HasOne("PEP.Model.Domain.AlgorithmProblem", "Problem")
                        .WithMany("ProblemTags")
                        .HasForeignKey("ProblemId")
                        .HasConstraintName("fk_problem_tags_problem_id");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("PEP.Model.Domain.Reply", b =>
                {
                    b.HasOne("PEP.Model.Domain.Comment", "Comment")
                        .WithMany("Replies")
                        .HasForeignKey("CommentId")
                        .IsRequired()
                        .HasConstraintName("fk_replies_comment_id");

                    b.HasOne("PEP.Model.Domain.User", "FromUser")
                        .WithMany("ReplyFromUsers")
                        .HasForeignKey("FromUserId")
                        .IsRequired()
                        .HasConstraintName("fk_replies_from_user_id");

                    b.HasOne("PEP.Model.Domain.User", "ToUser")
                        .WithMany("ReplyToUsers")
                        .HasForeignKey("ToUserId")
                        .IsRequired()
                        .HasConstraintName("fk_replies_to_user_id");

                    b.Navigation("Comment");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("PEP.Model.Domain.SubChapter", b =>
                {
                    b.HasOne("PEP.Model.Domain.Course", "Course")
                        .WithMany("SubChapters")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("fk_sub_chapters_course_id");

                    b.HasOne("PEP.Model.Domain.CourseChapter", "ParentChapter")
                        .WithMany("SubChapters")
                        .HasForeignKey("ParentChapterId")
                        .HasConstraintName("fk_sub_chapters_parent_chapter_id");

                    b.Navigation("Course");

                    b.Navigation("ParentChapter");
                });

            modelBuilder.Entity("PEP.Model.Domain.SubmissionRecord", b =>
                {
                    b.HasOne("PEP.Model.Domain.AlgorithmProblem", "Problem")
                        .WithMany("SubmissionRecords")
                        .HasForeignKey("ProblemId")
                        .HasConstraintName("FK__records__problem__625A9A57");

                    b.HasOne("PEP.Model.Domain.User", "User")
                        .WithMany("SubmissionRecords")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__records__user_id__634EBE90");

                    b.Navigation("Problem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PEP.Model.Domain.TestDatum", b =>
                {
                    b.HasOne("PEP.Model.Domain.AlgorithmProblem", "Problem")
                        .WithMany("TestData")
                        .HasForeignKey("ProblemId")
                        .HasConstraintName("fk_test_data_problem_id");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("PEP.Model.Domain.UserCourse", b =>
                {
                    b.HasOne("PEP.Model.Domain.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("fk_user_courses_course_id");

                    b.HasOne("PEP.Model.Domain.User", "User")
                        .WithMany("UserCourses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_courses_user_id");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PEP.Model.Domain.AlgorithmProblem", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("ProblemTags");

                    b.Navigation("SubmissionRecords");

                    b.Navigation("TestData");
                });

            modelBuilder.Entity("PEP.Model.Domain.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("PEP.Model.Domain.Course", b =>
                {
                    b.Navigation("CourseChapters");

                    b.Navigation("CourseTags");

                    b.Navigation("SubChapters");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("PEP.Model.Domain.CourseChapter", b =>
                {
                    b.Navigation("SubChapters");
                });

            modelBuilder.Entity("PEP.Model.Domain.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("PEP.Model.Domain.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("ReplyFromUsers");

                    b.Navigation("ReplyToUsers");

                    b.Navigation("SubmissionRecords");

                    b.Navigation("UserCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
